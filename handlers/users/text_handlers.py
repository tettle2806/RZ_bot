import re

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from data.loader import dp, db
from keyboards.inline import generate_menu_language
from keyboards.reply import generate_main_menu, settings, generate_type_of_order, generate_delivery, \
    generate_menu_categories, \
    generate_filials, generate_filials_info, generate_review
from states.states import NumberState


async def start_register(message: Message, state=None):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param message:
    :param state:
    :return:
    """
    await NumberState.phone.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 ** *** ** **')


@dp.message_handler(state=NumberState.phone)
async def get_phone(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–∏–ø–∞–µ—Ç—Å—è,
    –µ—Å–ª–∏ –∂–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    :param message:
    :param state:
    :return:
    """

    phone = message.text
    result1 = re.search(r'\+998 \d\d \d\d\d \d\d \d\d', phone)
    result2 = re.search(r'\+998\d{9}', phone)
    if result1 or result2:
        await state.finish()
        chat_id = message.chat.id
        full_name = message.from_user.full_name
        db.insert_user(chat_id, full_name, phone)
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await show_main_menu(message)
    else:
        await state.finish()
        await again_ask_phone(message)


@dp.message_handler(regexp='üõç –ó–∞–∫–∞–∑–∞—Ç—å')
async def reaction_on_order(message: Message):
    await message.answer('–ó–∞–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É',
                         reply_markup=generate_type_of_order())


@dp.message_handler(regexp='üöñ –î–æ—Å—Ç–∞–≤–∫–∞')
async def reaction_on_delivery(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=generate_delivery())


@dp.message_handler(regexp='üèÉüèª‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑')
async def pickup_rection(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª', reply_markup=generate_filials())


@dp.message_handler(regexp='üìç –Ø–∑—ã–∫')
async def reaction_on_language(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', reply_markup=generate_menu_language())


@dp.message_handler(regexp='‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
async def reaction_review(message: Message):
    await message.answer('‚úÖ–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ Fish and Bread\n'
                         '–ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –í—ã –ø–æ–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n'
                         '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –ø–æ 5 –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ', reply_markup=generate_review())


@dp.message_handler(regexp='üö© –ö —Ñ–∏–ª–∏–∞–ª–∞–º')
async def back_filials(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª', reply_markup=generate_filials())


@dp.message_handler(regexp='‚òé –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏')
async def reaction_feedback(message: Message):
    await message.answer('<b>–ï–¥–∏–Ω—ã–π call-center:</b> 1234 –∏–ª–∏ +998(70) 123-45-67')


@dp.message_handler(regexp='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def reaction_settings(message: Message):
    """
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ –ù–ê–°–¢–†–û–ô–ö–ò
    :param message:
    :return:
    """
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=settings())


@dp.message_handler(regexp='‚¨Ö –ù–∞–∑–∞–¥')
async def reaction_settings(message: Message):
    """
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    :param message:
    :return:
    """
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=generate_main_menu())


async def again_ask_phone(message: Message, state=None):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ —Ç–æ—Ç –±—ã–ª –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ
    :param message:
    :param state:
    :return:
    """
    await NumberState.phone.set()
    await message.answer('''–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 ** *** ** **''')


async def show_main_menu(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    :param message:
    :return:
    """
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=generate_main_menu())


filials = [i[0] for i in db.get_filials_names()]


@dp.message_handler(lambda message: message.text in filials)
async def show_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=generate_menu_categories())


filials_info = ['‚Ñπ' + i[0] for i in db.get_filials_names()]


@dp.message_handler(regexp='‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def generate_menu_information(message: Message):
    await message.answer('–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', reply_markup=generate_filials_info())


@dp.message_handler(lambda message: message.text in filials_info)
async def information_filials(message: Message):
    mes = message.text
    mess = mes.split('‚Ñπ')
    await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
    info = db.get_filial(mess[1])
    text = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞: {info[1]}\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {info[3]}\n–ü–æ—Å–∞–¥–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞: {info[2]}\n–õ–æ–∫–∞—Ü–∏—è: {info[4]}\n'

    await message.answer(text)
