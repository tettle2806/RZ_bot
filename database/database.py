import sqlite3


class DataBase:
    def __init__(self):
        self.database = sqlite3.connect('shop.db', check_same_thread=False)

    def manager(self, sql, *args,
                fetchone: bool = False,
                fetchall: bool = False,
                commit: bool = False):
        with self.database as db:
            cursor = db.cursor()
            cursor.execute(sql, args)
            if commit:
                result = db.commit()
            if fetchone:
                result = cursor.fetchone()
            if fetchall:
                result = cursor.fetchall()
            return result

    def create_users_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS users(
            telegram_id BIGINT PRIMARY KEY,
            full_name VARCHAR(100),
            phone VARCHAR(20) UNIQUE
        )
        '''
        self.manager(sql, commit=True)

    def get_user_by_id(self, telegram_id):
        sql = '''
        SELECT * FROM users WHERE telegram_id = ?
        '''
        return self.manager(sql, telegram_id, fetchone=True)

    def insert_user(self, telegram_id, full_name, phone):
        sql = '''
        INSERT INTO users(telegram_id, full_name, phone) VALUES (?,?,?)
        '''
        self.manager(sql, telegram_id, full_name, phone, commit=True)

    def create_filials_table(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS filials(
            filial_id INTEGER PRIMARY KEY AUTOINCREMENT,
            filial_name VARCHAR(100),
            place INTEGER,
            worktime VARCHAR(100),
            address VARCHAR(100)   
        )
        '''
        self.manager(sql, commit=True)

    def insert_filials(self):
        sql = '''
            INSERT INTO filials(filial_name, place, worktime, address) VALUES 
            ('–ß–∏–ª–∞–Ω–∑–∞—Ä', 50, '11:00-23:00', '–ù–∞ —á–∏–ª–∞–Ω–∑–∞—Ä–µ'),
            ('–ú–∞–ª–∏–∫–∞', 40, '9:00-19:00', '–ù–∞ –º–∞–ª–∏–∫–µ'),
            ('–ú–∞–∫—Å–∏–º–∫–∞', 100, '12:00-23:00', '–ù–∞ –º–∞–∫—Å–∏–º–∫–µ'),
            ('–ß–æ—Ä—Å—É', 70, '8:00-1:00', '–ù–∞ —á–æ—Ä—Å—É')
        '''
        self.manager(sql, commit=True)

    def get_filials_names(self):
        sql = '''
            SELECT filial_name FROM filials
        '''
        return self.manager(sql, fetchall=True)

    def get_filial(self, filial_name):
        sql = '''
            SELECT * FROM filials WHERE filial_name = ?
        '''
        return self.manager(sql, filial_name, fetchone=True)

    def create_categories_table(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS categories(
            category_id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_title VARCHAR(50) UNIQUE
        )
        '''
        self.manager(sql, commit=True)

    def insert_categories(self):
        sql = '''
            INSERT INTO categories(category_title) VALUES
            ('–ù–∞–±–æ—Ä—ã(—Å–µ—Ç—ã)'),
            ('ü•ô –®–∞—É—Ä–º–∞'),
            ('üçü –ì–∞—Ä–Ω–∏—Ä—ã'),
            ('üå≠ –•–æ—Ç-–î–æ–≥–∏'),
            ('ü•ó –°–∞–ª–∞—Ç—ã'),
            ('üßÇ –°–æ—É—Å—ã'),
            ('üçÆ –î–µ—Å–µ—Ä—Ç—ã'),
            ('üç® –ú–æ—Ä–æ–∂–µ–Ω–æ–µ'),
            ('üåØ –õ–∞–≤–∞—à'),
            ('üçî –ë—É—Ä–≥–µ—Ä—ã'),
            ('üçπ –•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏'),
            ('‚òï –ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏'),
            ('–°–Ω–µ–∫–∏')
        '''

        self.manager(sql, commit=True)

    def get_categories(self):
        sql = '''
            SELECT category_title FROM categories
        '''
        return self.manager(sql, fetchall=True)

    def drop(self):
        sql = '''
            DROP TABLE products
        '''

        self.manager(sql, commit=True)

    def create_products_table(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS products(
            product_id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_title VARCHAR(50) UNIQUE,
            description VARCHAR(255),
            price INTEGER,
            image TEXT,
            category_id INTEGER REFERENCES categories(category_id)
            )
        '''
        self.manager(sql, commit=True)

    def insert_products(self):
        sql = '''
           INSERT INTO products(product_title, description, price, image, category_id) VALUES
           ('–§–∏—Ä–º–µ–Ω–Ω–æ–µ –∫–æ–º–±–æ','–§–∏—Ä–º–µ–Ω–Ω—ã–π –±—É—Ä–≥–µ—Ä, –∫–∞—Ä—Ç–æ—à–∫–∞-—Ñ—Ä–∏ –∏ –∫–æ–ª–∞ 0.5 –º–ª. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ–∑ –∫—Ç–æ –ª—é–±–∏—Ç —É—Ç–æ–Ω—á–µ–Ω–Ω—ã–π –≤–∫—É—Å –±—É—Ä–≥–µ—Ä–∞ —Å –Ω–∞—à–∏–º —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —Å–æ—É—Å–æ–º', 47500,'photo/1.jpg' , 1),
           ('BBQ Delight','–ö–æ–º–±–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è BBQ –≥–∞–º–±—É—Ä–≥–µ—Ä, –ø–æ—Ä—Ü–∏—é –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è —Ñ—Ä–∏ –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–π –º–∏–Ω–¥–∞–ª—å–Ω—ã–π –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å.', 55000, 'photo/3.jpg', 1),
           ('–ö–æ–º–±–æ –¥–ª—è –≥—É—Ä–º–∞–Ω–æ–≤','–ö–æ–º–±–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 –ø–∞–ª–æ—á–µ–∫ –º–æ–ª–æ—Ç–æ–≥–æ —à–∞—à–ª—ã–∫–∞, 500 –≥—Ä–∞–º–º –∫—É—Ä–∏–Ω—ã—Ö –±–µ–¥–µ—Ä –∏ 500 –≥—Ä–∞–º–º –∂–∞—Ä–µ–Ω–Ω—ã—Ö –∫—Ä–∏–≤–µ—Ç–æ–∫ –≤–æ —Ñ—Ä–∏—Ç—é—Ä–µ',320000, 'photo/2.jpg', 1),
           ('–¢—Ä–æ–π–Ω–æ–π –ë—É—Ä–≥–µ—Ä',' –≠—Ç–æ –∫–æ–º–±–æ, –≤–∫–ª—é—á–∞—é—â–µ–µ –≤ —Å–µ–±—è —Ç—Ä–∏ –±—É—Ä–≥–µ—Ä–∞ –Ω–∞ –≤—ã–±–æ—Ä: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫—É—Ä–∏–Ω—ã–π, –±–µ–∫–æ–Ω-—á–µ–¥–¥–µ—Ä –∏ –±—É—Ä–≥–µ—Ä —Å –±—Ä—É—Å–∫–µ—Ç—Ç–æ–π. –ö –Ω–∏–º –ø–æ–¥–∞–µ—Ç—Å—è –ø–æ—Ä—Ü–∏—è –ª—É–∫–æ–≤—ã—Ö –∫–æ–ª–µ—á–µ–∫ –∏ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –Ω–∞ –≤—ã–±–æ—Ä –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞',155000,'photo/4.jpeg', 1),
           ('–ë–æ–ª—å—à–æ–π –ê–ø–ø–µ—Ç–∏—Ç','–≠—Ç–æ –∫–æ–º–±–æ, –∏–¥–µ–∞–ª—å–Ω–æ–µ –¥–ª—è –≥–æ–ª–æ–¥–Ω—ã—Ö –≥—É—Ä–º–∞–Ω–æ–≤! –û–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –¥–≤–æ–π–Ω–æ–π –≥–∞–º–±—É—Ä–≥–µ—Ä —Å –∫–≤–µ—Å—Ç–æ–º, –±–æ–ª—å—à—É—é –ø–æ—Ä—Ü–∏—é –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è —Ñ—Ä–∏ –∏ –±–æ–ª—å—à–æ–π –Ω–µ—Å–ª–∞–¥–∫–∏–π —á–∞–π',65000, 'photo/5.jpg', 1),
           ('Kids-–ö–æ–º–±–æ','–ö–æ–º–±–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤, –∫—É—Ä–∏–Ω—ã–π –≥–∞–º–±—É—Ä–≥–µ—Ä —Å —Å—ã—Ä–æ–º –∏ –∫–∞—Ä—Ç–æ—à–∫–æ–π-—Ñ—Ä–∏ –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ —Ä–∞—Å—Ç–∏—à–∫–∞ —á—Ç–æ-–±—ã –Ω–∞—à –≥–µ—Ä–æ–π —Ä–æ—Å –±–æ–ª—å—à–∏–º ',40000, 'photo/6.jpg', 1)
        '''
        self.manager(sql, commit=True)

    def get_products_by_category(self, category_title):
        sql = '''
            SELECT product_title FROM products WHERE category_id = (
                SELECT category_id FROM categories WHERE category_title = ?
            )
        '''
        return self.manager(sql, category_title, fetchall=True)

    def get_products_by_title(self, product_title):
        sql = '''
            SELECT * FROM products WHERE product_title = ?
        '''

        return self.manager(sql, product_title, fetchone=True)

    def get_all_products(self):
        sql = '''
            SELECT product_title FROM products
        '''
        return self.manager(sql, fetchall=True)
